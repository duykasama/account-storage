@typeparam TItem

<table class="table table-hover">
    <thead>
        <tr>
            @if (Columns is null || Columns.Count <= 0)
            {
                // use data reflection
            }
            else
            {
                foreach (var column in Columns)
                {
                    var cssClass = "table-dark";

                    cssClass += (column.Alignment is not Alignment.NotSet) ? " align-" + column.Alignment.ToString().ToLower() : "";

                    <th scope="col" class="@cssClass">@column.Caption</th>
                }
                <th colspan="2" class="table-dark text-center" >Actions</th>
            }
        </tr>
    </thead>
    <tbody>
        @if (DataItems is not null)
        {
            @foreach (var item in DataItems.Skip(Paging.NumberOfItemsToSkip(CurrentPageNumber))
                .Take(Paging.NumberOfItemsToTake(DataItems.Count)))
            {
                <tr>
                    @foreach (var column in Columns)
                    {
                        var cssClass = "table-info";
                        string value = typeof(TItem).GetProperty(column.DataField).GetValue(item).ToString();

                        if (!string.IsNullOrEmpty(column.Format) || column.DataType != DataType.NotSet)
                        {
                            switch (column.DataType)
                            {
                                case DataType.Date:
                                case DataType.DateTime:
                                    value = DateTime.Parse(typeof(TItem).GetProperty(column.DataField).GetValue(item).ToString()).ToString(column.Format);
                                    break;
                                case DataType.Boolean:
                                    value = Boolean.Parse(typeof(TItem).GetProperty(column.DataField).GetValue(item).ToString()).ToString();
                                    break;
                                case DataType.Currency:
                                    value = Math.Round(Double.Parse(typeof(TItem).GetProperty(column.DataField).GetValue(item).ToString()), 2).ToString("vnd");
                                    break;
                            }
                        }

                        if (column.Alignment != Alignment.NotSet)
                        {
                            <td class="@cssClass" align="@column.Alignment.ToString().ToLower()">@value</td>
                        }
                        else
                        {
                            <td class="@cssClass">@value</td>
                        }
                    }
                    <td class="table-info">
                        <button class="btn btn-outline-secondary" @onclick='() => { Edit.InvokeAsync(typeof(TItem).GetProperty("Id").GetValue(item).ToString()); }'>
                            <span class="oi oi-pencil"></span>
                        </button>
                    </td>
                    <td class="table-info">
                        <button class="btn btn-outline-danger" @onclick='() => { Delete.InvokeAsync((typeof(TItem).GetProperty("Id").GetValue(item).ToString())); }'>
                            <span class="oi oi-trash"></span>
                        </button>
                    </td>
                </tr> 
            
            }
        }
    </tbody>

</table>

@if (Paging is not null && Paging.Enabled && DataItems is not null)
{
    @if (Paging.UseCustomPager)
    {
        @CustomPager
    }
    else
    {
        <div class="d-flex justify-content-end align-items-center">
            <ul class="pagination">
                <li class="page-item">
                    <button class="page-link" @onclick="GoToPrevPage">&laquo;</button>
                </li>
                <li class="page-item text-danger">
                    <span class="page-link" href="#">Page @CurrentPageNumber of @Paging.LastPage(DataItems.Count)</span>
                </li>
                <li class="page-item">
                    <button class="page-link" @onclick="GoToNextPage">&raquo;</button>
                </li>
            </ul>
        </div>
    }
}


@code {
    [Parameter]
    public int CurrentPageNumber { get; set; } = 1;

    [Parameter]
    public ICollection<TItem> DataItems { get; set; }

    [Parameter]
    public List<ColumnDefinition> Columns { get; set; }

    [Parameter]
    public PagingConfig Paging { get; set; }

    [Parameter]
    public RenderFragment CustomPager { get; set; }

    [Parameter]
    public EventCallback<string> Edit { get; set; }

    [Parameter]
    public EventCallback<string> Delete { get; set; }
    

    private string id = string.Empty;

    public void GoToPrevPage()
    {
        CurrentPageNumber = Paging.PreviousPageNumber(CurrentPageNumber);
    }

    public void GoToNextPage()
    {
        CurrentPageNumber = Paging.NextPageNumber(CurrentPageNumber, DataItems.Count);
    }
}
