@page "/counter"
@using AccountStorage.Clients.WebClients.Flux.Stores.CounterStore;
@using AccountStorage.Clients.WebClients.Flux.Stores.CounterStore.Actions;
@implements IDisposable
@inject CounterStore CounterStore
@inject IActionDispatcher<IAction> ActionDispatcher

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

@if (show)
{
    @foreach (var i in list)
    {
        <div>@i</div>
    }
}

<button class="btn btn-primary" @onclick="Load">Load</button>
<button class="btn btn-primary" @onclick="Delete">Delete</button>
<button class="btn btn-primary" @onclick="Start">Start</button>

@code {
    private int currentCount = 0;
    List<int> list = new List<int>();
    private bool show = true;

    //private void IncrementCount()
    //{
    //    ActionDispatcher.Dispatch(new IncrementCount());
    //    currentCount = CounterStore.GetState().Value;
    //}

    //private void DecrementCount()
    //{
    //    ActionDispatcher.Dispatch(new DecrementCount());
    //    currentCount = CounterStore.GetState().Value;
    //}

    private void Load()
    {
        //ActionDispatcher.Dispatch(new LoadAction());
        list = CounterStore.GetState().Value;
    }

    private void Delete()
    {
        //ActionDispatcher.Dispatch(new DeleteAction());
        list = CounterStore.GetState().Value;
    }

    protected override void OnParametersSet()
    {
        CounterStore.AddStateChangeListener(UpdateView);
        base.OnParametersSet();
    }

    private void Start()
    {
        for(int i = 0; i < 10; i++)
        {
            show = !show;
            //ActionDispatcher.Dispatch(new DeleteAction());
           
            Thread.Sleep(2000);
        }
    }

    public void Dispose()
    {
        CounterStore.RemoveStateChangeListener(UpdateView);
    }

    private void UpdateView()
    {
        StateHasChanged();
    }
}
