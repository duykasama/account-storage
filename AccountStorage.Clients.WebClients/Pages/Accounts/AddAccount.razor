@page "/add-account"
@using AccountStorage.Clients.WebClients.Flux.Stores.CategoryStore.Actions;
@using AccountStorage.Clients.WebClients.Flux.Stores.SystemUserStore;
@using AccountStorage.Clients.WebClients.Flux.Stores.SystemUserStore.Actions;
@using Microsoft.AspNetCore.Identity;
@implements IDisposable
@inject IActionDispatcher<IAction> Dispatcher
@inject AccountStore AccountStore
@inject PlatformStore PlatformStore
@inject CategoryStore CategoryStore
@inject SystemUserStore SystemUserStore
@inject UserManager<SystemUser> UserManager

<h1 class="text-center">Add New Account</h1>
<h1 class="text-center">@_authState.User.Identity.Name</h1>

<div class="d-flex justify-content-center align-items-center">
    <EditForm Model="@account" OnSubmit="HandleFormSubmission" class="form-control w-50 p-5">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <div class="form-group">
            <label for="accountName" class="form-label mt-4">Account name</label>
            <InputText class="form-control" id="accountName" aria-describedby="emailHelp" placeholder="Enter account name" @bind-Value="@account.AccountName" required></InputText>
        </div>
        <div class="form-group">
            <label for="exampleInputEmail1" class="form-label mt-4">Email address</label>
            <InputText type="email" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" placeholder="Enter email" @bind-Value="@account.Email" required></InputText>
            <small id="emailHelp" class="form-text text-muted">We'll never share your email with anyone else.</small>
        </div>
        <div class="form-group">
            <label for="exampleInputPassword1" class="form-label mt-4">Password</label>
            <InputText type="password" class="form-control" id="exampleInputPassword1" placeholder="Password" autocomplete="off" @bind-Value="@account.Password" required></InputText>
        </div>
        <div class="form-group">
            <label for="exampleSelect1" class="form-label mt-4">Select platform</label>
            <InputSelect class="form-select" id="exampleDisabledSelect1" @bind-Value="@platformId">
                <option selected>Not selected</option>
                @foreach (var f in platforms)
                {
                    @if(f != null)
                    {
                        <option value="@f.Id">@f.Name</option>
                    }
                }
                <option>Other</option>
            </InputSelect>
        </div>
        <div class="form-group">
            <label for="exampleSelect1" class="form-label mt-4">Select categroy</label>
            <InputSelect class="form-select" id="exampleDisabledSelect1" @bind-Value="@categoryId">
                <option selected>Not selected</option>
                @foreach (var c in categories)
                {
                    @if (c != null)
                    {
                        @if (c.Name != "Other")
                        {
                            <option value="@c.Id">@c.Name</option>
                        }
                    }
                }
                <option>Other</option>
            </InputSelect>
        </div>
        <div class="form-group text-end mt-3">
            <button type="submit" class="btn btn-secondary">Submit</button>
        </div>
    </EditForm>
</div>

@if (DisplayModalBox)
{
    <ModalBoxComponent HideModalBox="HideModalBox" Title="@modalBoxTitle" Message="@modalBoxMessage" />
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authState { get; set; }
    private AuthenticationState _authState;
    private SystemUser currentUser;
    private Account account = new Account();
    private string platformId = string.Empty;
    private string categoryId = string.Empty;
    private ICollection<Platform> platforms = new List<Platform>();
    private ICollection<Category> categories = new List<Category>();
    private string modalBoxTitle = string.Empty;
    private string modalBoxMessage = string.Empty;
    private bool DisplayModalBox { get; set; } = false;

    protected override Task OnParametersSetAsync()
    {
        return base.OnParametersSetAsync();
    }

    private void HandleFormSubmission()
    {
        account.CreationDate = DateTime.Now;
        account.LastModification = DateTime.Now;
        Dispatcher.Dispatch(new LoadCategoryByIdAction(categoryId));
        Dispatcher.Dispatch(new LoadPlatformByIdAction(platformId));
        var selectedCategory = CategoryStore.GetState().Value.First();
        var selectedPlatform = PlatformStore.GetState().Value.First();
        account.Category = selectedCategory;
        account.Platform = selectedPlatform;
        account.User = SystemUserStore.GetState().Value.First();
        Dispatcher.Dispatch(new AddAccountAction(account));
        if (AccountStore.GetState().Status == Status.SUCCESS)
        {
            // display success message
            modalBoxTitle = "Notification";
            modalBoxMessage = "Account created successfully";
            account = new Account();

        }
        else if (AccountStore.GetState().Status == Status.FAILURE)
        {
            // display failure message
            modalBoxTitle = "Error";
            modalBoxMessage = "Could not add your account";
        }
        else
        {
            // unknown
            modalBoxTitle = "?????";
            modalBoxMessage = "Something went wrong";
        }
        Dispatcher.Dispatch(new LoadPlatformsAction(new Platform()));
        Dispatcher.Dispatch(new LoadCategoriesAction(new Category()));
        DisplayModalBox = true;
    }

    public void HandlePlatformChange(string value)
    {
        if (platformId.Equals("OTHER", StringComparison.OrdinalIgnoreCase))
        {
            DisplayModalBox = true;
        }
    }

    private void HideModalBox()
    {
        DisplayModalBox = false;
    }

    #region update store status

    private void UpdateSystemUserState()
    {
        currentUser = SystemUserStore.GetState().Value.First();
        UpdateView();
    }

    private void UpdatePlatformsState()
    {
        platforms = PlatformStore.GetState().Value;
        UpdateView();
    }

    private void UpdateCategoriesState()
    {
        categories = CategoryStore.GetState().Value;
        UpdateView();
    }

    private void UpdateView()
    {
        InvokeAsync(StateHasChanged);
    }

    #endregion

    #region register listeners

    protected override async Task OnInitializedAsync()
    {
        _authState = await authState;
        AccountStore.AddStateChangeListener(UpdateView);
        PlatformStore.AddStateChangeListener(UpdatePlatformsState);
        CategoryStore.AddStateChangeListener(UpdateCategoriesState);
        SystemUserStore.AddStateChangeListener(UpdateSystemUserState);
        Dispatcher.Dispatch(new LoadPlatformsAction(null));
        Dispatcher.Dispatch(new LoadCategoriesAction(null));
        Dispatcher.Dispatch(new LoadCurrentSystemUserAction((await UserManager.GetUserAsync(_authState.User)).Id));
    }

    public void Dispose()
    {
        AccountStore.RemoveStateChangeListener(UpdateView);
        PlatformStore.RemoveStateChangeListener(UpdatePlatformsState);
        CategoryStore.RemoveStateChangeListener(UpdateCategoriesState);
    }

    #endregion
}
