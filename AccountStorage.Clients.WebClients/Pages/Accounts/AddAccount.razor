@page "/add-account"
@using AccountStorage.Clients.WebClients.Enums;
@implements IDisposable
@inject IActionDispatcher Dispatcher
@inject AccountStore AccountStore


<h1 class="text-center">Add New Account</h1>

<div class="d-flex justify-content-center align-items-center">
    <EditForm Model="@account" OnSubmit="HandleFormSubmission" class="form-control w-50 p-5">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <div class="form-group">
            <label for="accountName" class="form-label mt-4">Account name</label>
            <InputText class="form-control" id="accountName" aria-describedby="emailHelp" placeholder="Enter account name" @bind-Value="@account.AccountName" required></InputText>
        </div>
        <div class="form-group">
            <label for="exampleInputEmail1" class="form-label mt-4">Email address</label>
            <InputText type="email" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" placeholder="Enter email" @bind-Value="@account.Email" required></InputText>
            <small id="emailHelp" class="form-text text-muted">We'll never share your email with anyone else.</small>
        </div>
        <div class="form-group">
            <label for="exampleInputPassword1" class="form-label mt-4">Password</label>
            <InputText type="password" class="form-control" id="exampleInputPassword1" placeholder="Password" autocomplete="off" @bind-Value="@account.Password" required></InputText>
        </div>
        <div class="form-group">
            <label for="platform" class="form-label mt-4">Platform</label>
            <InputText class="form-control" id="platform" aria-describedby="emailHelp" placeholder="Enter platform name" @bind-Value="@platform.Name" required></InputText>
        </div>
        <div class="form-group">
            <label for="category" class="form-label mt-4">Category</label>
            <InputText class="form-control" id="category" aria-describedby="emailHelp" placeholder="Enter category" @bind-Value="@category.Name" required></InputText>
        </div>
        <div class="form-group text-end mt-3">
            <button type="submit" class="btn btn-secondary">Submit</button>
        </div>
    </EditForm>
</div>
<CascadingValue Name="Display" Value="@DisplayModalBox">
    <ModalBoxComponent Title="@modalBoxTitle" Content="@modalBoxMessage" />
</CascadingValue>

@*<div>
    <button @onclick="Show">Display</button>
</div>*@

@if (false)
{
    <form>
    <fieldset>
        <legend>Legend</legend>
        <div class="form-group">
            <label for="exampleInputEmail1" class="form-label mt-4">Email address</label>
            <input type="email" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" placeholder="Enter email">
            <small id="emailHelp" class="form-text text-muted">We'll never share your email with anyone else.</small>
        </div>
        <div class="form-group">
            <label for="exampleInputPassword1" class="form-label mt-4">Password</label>
            <input type="password" class="form-control" id="exampleInputPassword1" placeholder="Password" autocomplete="off">
        </div>
        <div class="form-group">
            <label for="exampleSelect1" class="form-label mt-4">Example select</label>
            <select class="form-select" id="exampleSelect1">
                <option>1</option>
                <option>2</option>
                <option>3</option>
                <option>4</option>
                <option>5</option>
            </select>
        </div>
        <div class="form-group">
            <label for="exampleSelect1" class="form-label mt-4">Example disabled select</label>
            <select class="form-select" id="exampleDisabledSelect1" disabled="">
                <option>1</option>
                <option>2</option>
                <option>3</option>
                <option>4</option>
                <option>5</option>
            </select>
        </div>
        <div class="form-group">
            <label for="exampleSelect2" class="form-label mt-4">Example multiple select</label>
            <select multiple="" class="form-select" id="exampleSelect2">
                <option>1</option>
                <option>2</option>
                <option>3</option>
                <option>4</option>
                <option>5</option>
            </select>
        </div>
        <fieldset class="form-group">
            <legend class="mt-4">Radio buttons</legend>
            <div class="form-check">
                <input class="form-check-input" type="radio" name="optionsRadios" id="optionsRadios1" value="option1" checked="">
                <label class="form-check-label" for="optionsRadios1">
                    Option one is this and that—be sure to include why it's great
                </label>
            </div>
            <div class="form-check">
                <input class="form-check-input" type="radio" name="optionsRadios" id="optionsRadios2" value="option2">
                <label class="form-check-label" for="optionsRadios2">
                    Option two can be something else and selecting it will deselect option one
                </label>
            </div>
            <div class="form-check disabled">
                <input class="form-check-input" type="radio" name="optionsRadios" id="optionsRadios3" value="option3" disabled="">
                <label class="form-check-label" for="optionsRadios3">
                    Option three is disabled
                </label>
            </div>
        </fieldset>
        <fieldset class="form-group">
            <legend class="mt-4">Checkboxes</legend>
            <div class="form-check">
                <input class="form-check-input" type="checkbox" value="" id="flexCheckDefault">
                <label class="form-check-label" for="flexCheckDefault">
                    Default checkbox
                </label>
            </div>
            <div class="form-check">
                <input class="form-check-input" type="checkbox" value="" id="flexCheckChecked" checked="">
                <label class="form-check-label" for="flexCheckChecked">
                    Checked checkbox
                </label>
            </div>
        </fieldset>
        <fieldset class="form-group">
            <legend class="mt-4">Switches</legend>
            <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" id="flexSwitchCheckDefault">
                <label class="form-check-label" for="flexSwitchCheckDefault">Default switch checkbox input</label>
            </div>
            <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" id="flexSwitchCheckChecked" checked="">
                <label class="form-check-label" for="flexSwitchCheckChecked">Checked switch checkbox input</label>
            </div>
        </fieldset>
    </fieldset>
</form>
}

@code {
    private Account account = new Account();
    private Platform platform = new Platform();
    private Category category = new Category();

    private string modalBoxMessage = "Title";
    private string modalBoxTitle = "Hello";

    private bool DisplayModalBox { get; set; }

    private void HandleFormSubmission()
    {
        account.CreationDate = DateTime.UtcNow;
        account.LastModification = DateTime.UtcNow;
        account.Category = category;
        account.Platform = platform;
        Dispatcher.Dispatch(new AddAccountAction(account));
        if (AccountStore.GetState().Status == Status.SUCCESS)
        {
            // display success message
            modalBoxTitle = "Notification";
            modalBoxMessage = "Account created successfully";
            DisplayModalBox = true;

        }
        else if (AccountStore.GetState().Status == Status.FAILURE)
        {
            // display failure message
            modalBoxTitle = "Error";
            modalBoxMessage = "An error occurred";
            DisplayModalBox = true;
        }
        else
        {
            // unknown
        }
    }

    private void Show()
    {
        DisplayModalBox = !DisplayModalBox;
    }

    protected override Task OnInitializedAsync()
    {
        AccountStore.AddStateChangeListener(UpdateView);
        return base.OnInitializedAsync();
    }

    protected override Task OnParametersSetAsync()
    {
        return base.OnParametersSetAsync();
    }

    private async void UpdateView()
    {
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        AccountStore.RemoveStateChangeListener(UpdateView);
    }
}
