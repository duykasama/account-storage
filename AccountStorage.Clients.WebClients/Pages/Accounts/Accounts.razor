@page "/accounts"
@implements IDisposable
@inject IActionDispatcher<IAction> Dispatcher
@inject AccountStore AccountStore
@inject UserManager<SystemUser> UserManager

<h3 class="text-center">Accounts</h3>

<DataGridComponent 
    TItem="Account" 
    DataItems="@accounts" 
    Columns="@columnsDefinition" 
    Paging="@paging"
    Edit="EditAccount"
    Delete="DeleteAccount"/>

@if (displayModalBox)
{
    <ModalBoxComponent 
        HideModalBox="HideModalBox" 
        Title="@modalBoxTitle"
        Buttons="buttonsDefinition"
        BodyFragment="modalBoxBody" />
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authState { get; set; }
    private AuthenticationState _authState;
    private List<ColumnDefinition> columnsDefinition;
    private List<ButtonDefinition> buttonsDefinition;
    private PagingConfig paging;
    private SystemUser currentUser;
    private ICollection<Account> accounts;
    private string modalBoxTitle = string.Empty;
    private bool displayModalBox = false;
    private string accountId = string.Empty;
    private RenderFragment modalBoxBody;
    private string confirmationPassword;
    private bool isCorrectPassword;

    private void EditAccount(string id)
    {
        //display = true;
    }

    private void DeleteAccount(string id)
    {
        accountId = id;
        modalBoxTitle = "Warning";
        InitializeButtonsDefinition(new ButtonDefinition[]
        {
            new ButtonDefinition(){ Name = "Yes", HandleOnclick = HandleWarningYes, CssClass = "btn btn-outline-danger" },
            new ButtonDefinition(){ Name = "No", HandleOnclick = HandleWarningNo, CssClass = "btn btn-outline-primary" },
        });
        modalBoxBody = @<span>Are you sure to delete this account?</span>;
        displayModalBox = true;
    }

    private void HandleWarningYes()
    {
        modalBoxTitle = "Notification";
        InitializeButtonsDefinition(new ButtonDefinition[]
        {
            new ButtonDefinition(){ Name = "Delete", HandleOnclick = DeleteAccountConfirmation, CssClass = "btn btn-outline-danger" },
            new ButtonDefinition(){ Name = "Cancel", HandleOnclick = HandleWarningNo, CssClass = "btn btn-outline-primary"},
        });
        modalBoxBody = @<div>Enter your password to confirm:</div>;
        modalBoxBody += @<input class="w-50" type="password" placeholder="Enter your password" @bind="@confirmationPassword" required/>;
        UpdateView();
    }

    private void HandleWarningNo()
    {
        HideModalBox();
        UpdateView();
    }

    private async void DeleteAccountConfirmation()
    {
        if (string.IsNullOrEmpty(confirmationPassword))
        {
            return;
        }
        isCorrectPassword = await UserManager.CheckPasswordAsync(currentUser, confirmationPassword);
        if (isCorrectPassword)
        {
            //Dispatcher.Dispatch(new LoadAccountsByUserIdAction(currentUser.Id));
            Dispatcher.Dispatch(new LoadAccountByIdAction(accountId));
            var account = AccountStore.GetState().Value.First();
            Dispatcher.Dispatch(new DeleteAccountAction(account));
            if (AccountStore.GetState().Status == Status.SUCCESS)
            {
                InitializeButtonsDefinition(
                    new ButtonDefinition(){ Name = "OK", HandleOnclick = HandleWarningNo, CssClass = "btn btn-outline-primary"}
                );
                modalBoxBody = @<div>Account has been deleted</div>;
                UpdateView();
            }
            else
            {
                InitializeButtonsDefinition(
                     new ButtonDefinition(){ Name = "OK", HandleOnclick = HandleWarningNo, CssClass = "btn btn-outline-primary"}
                );
                modalBoxBody = @<div>An error occurred! Couldn't delete your account</div>;
                UpdateView();
            }
        }
        else
        {
            InitializeButtonsDefinition(
                 new ButtonDefinition(){ Name = "OK", HandleOnclick = HandleWarningNo, CssClass = "btn btn-outline-primary"}
            );
            modalBoxBody = @<div>Incorrect password</div>;
            UpdateView();
        }
        confirmationPassword = string.Empty;
        //Dispatcher.Dispatch(new LoadAccountsByUserIdAction(currentUser.Id));
    }

    private void HideModalBox()
    {
        displayModalBox = false;
    }

    private void InitializeColumnDefinition()
    {
        if (columnsDefinition == null)
        {
            columnsDefinition = new List<ColumnDefinition>();
            columnsDefinition.AddRange(new ColumnDefinition[]
            {
                new ColumnDefinition(){ DataField = nameof(Account.AccountName), Caption = "Account name"},
                new ColumnDefinition(){ DataField = nameof(Account.Email), Caption = "Email"},
                new ColumnDefinition(){ DataField = nameof(Account.Platform), Caption = "Platform"},
                new ColumnDefinition(){ DataField = nameof(Account.Category), Caption = "Category"},
                new ColumnDefinition(){ DataField = nameof(Account.LastModification), Caption = "Last modification", DataType = DataType.DateTime, Format = "dd/MMM/yyyy"}
            });
        }
        paging = new PagingConfig()
        {
            Enabled = true,
            PageSize = 10,
        };     
    }

    private void InitializeButtonsDefinition(params ButtonDefinition[] buttons)
    {
        buttonsDefinition = new List<ButtonDefinition>();
        buttonsDefinition.AddRange(buttons);
    }

    protected override async Task OnInitializedAsync()
    {
        await Task.Run(() =>
        {
            AccountStore.AddStateChangeListener(UpdateView);
            InitializeColumnDefinition();
        }); 
    }

    protected override async Task OnParametersSetAsync()
    {
        _authState = await authState;
        currentUser = await UserManager.GetUserAsync(_authState.User);
        Dispatcher.Dispatch(new LoadAccountsByUserIdAction(currentUser.Id));
    }

    private void UpdateView()
    {
        accounts = AccountStore.GetState().Value;
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        AccountStore.RemoveStateChangeListener(UpdateView);
    }

}
