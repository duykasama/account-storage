@page "/accounts"
@using Microsoft.AspNetCore.Identity;
@implements IDisposable
@inject IActionDispatcher<IAction> Dispatcher
@inject AccountStore AccountStore
@inject UserManager<SystemUser> UserManager

<h3>Accounts</h3>

<DataGridComponent TItem="Account" DataItems="@accounts" Columns="columnsDefinition" /> 

@code {
    ICollection<Account> accounts;
    private List<ColumnDefinition> columnsDefinition;
    [CascadingParameter]
    private Task<AuthenticationState> authState { get; set; }
    private AuthenticationState _authState;
    private SystemUser currentUser;

    protected override async Task OnInitializedAsync()
    {
        await Task.Run(() =>
        {
            AccountStore.AddStateChangeListener(UpdateView);
        }); 
    }


    protected override async Task OnParametersSetAsync()
    {
        _authState = await authState;
        currentUser = await UserManager.GetUserAsync(_authState.User);
        Dispatcher.Dispatch(new LoadAccountsByUserIdAction(currentUser.Id));
        InitializeColumnDefinition();

    }

    private void InitializeColumnDefinition()
    {
        if (columnsDefinition == null)
        {
            columnsDefinition = new List<ColumnDefinition>();
            columnsDefinition.AddRange(new ColumnDefinition[]
            {
                new ColumnDefinition(){ DataField = nameof(Account.AccountName), Caption = "Account name"},
                new ColumnDefinition(){ DataField = nameof(Account.Email), Caption = "Email"},
                new ColumnDefinition(){ DataField = nameof(Account.Platform), Caption = "Platform"},
                new ColumnDefinition(){ DataField = nameof(Account.Category), Caption = "Category"},
                new ColumnDefinition(){ DataField = nameof(Account.LastModification), Caption = "Last modification", Alignment = Alignment.Right, DataType = DataType.DateTime, Format = "dd/MMM/yyyy"},
            });

        }
        
    }

    private void UpdateView()
    {
        accounts = AccountStore.GetState().Value;
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        AccountStore.RemoveStateChangeListener(UpdateView);
    }

}
