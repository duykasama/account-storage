@page "/create-account"
@inject IPlatformService PlatformService
@inject IAccountService AccountService

<form class="d-flex justify-content-center align-items-center flex-column gap-3" @onsubmit="OnPost">
    <h3>Create a new account</h3>
    <div class="form-group w-50">
        <div class="form-control mb-3">
            <select class="form-select text-body" @bind="@PlatformName">
                <option disabled hidden selected>Platform</option>
                @foreach (var platform in platforms)
                {
                    <option>@platform.Name</option>
                }
                <option>Other</option>
            </select>
        </div>
        <CreatePlatform Display="displayCreatePlatform" />
        <div class="form-floating mb-3">
            <input type="text" class="form-control" id="accoutName" placeholder="Your account name" @bind-value="account.AccountName" required>
            <label for="accoutName">Account name</label>
        </div>
        <div class="form-floating mb-3">
            <input type="email" class="form-control" id="floatingInput" placeholder="name@example.com" @bind-value="account.Email" required>
            <label for="floatingInput">Email address</label>
        </div>
        <div class="form-floating">
            <input type="password" class="form-control" id="floatingPassword" placeholder="Password" autocomplete="off" @bind-value="account.Password" required>
            <label for="floatingPassword">Password</label>
        </div>
        <div class="form-control mt-3">
            <select class="form-select text-body" @bind="account.Category" required>
                <option disabled hidden selected>Category</option>
                <option>Study</option>
                <option>Work</option>
                <option>Entertainment</option>
                <option>Other</option>
            </select>
        </div>
    </div>
    <div class="form-group w-50 text-end">
        <button class="btn btn-outline-light">Create</button>
    </div>
</form>
<NotificationDialog Display="displayNotifiation" Message="@notificationMessage" />

@code {
    private bool displayCreatePlatform = false;
    private bool displayNotifiation = false;
    private string notificationMessage = string.Empty;
    private string myVar = "Platform";
    private Account account = new Account();
    IEnumerable<Platform> platforms = new List<Platform>();
    private IAccountService anotherService = new AccountService();

    private string PlatformName 
    {
        get
        {
            return myVar;
        }
        set
        {
            if (value.Equals("other", StringComparison.OrdinalIgnoreCase))
            {
                this.displayCreatePlatform = true;
            }
            else
            {
                this.displayCreatePlatform = false;
            }
            myVar = value;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await Task.Run(() =>
        {
            platforms = PlatformService.GetPlatformsAsync().Result;

        });
    }

    private async Task OnPost()
    {
        var platform = await PlatformService.GetPlatformByNameAsync(myVar);
        if (platform is not null)
        {
            //account.Platform = new()
            //{
            //    Name = platform.Name,
            //    Url = platform.Url,
            //};
            account.Platform = platform;
            platform.Accounts.Add(account);
        }
        else
        {
            account.Platform = new Platform()
            {
                Name = "Other",
            };
        }

        try
        {
            account.CreationDate = DateTime.Now;
            account.LastModification = DateTime.Now;
            await AccountService.CreateAccountAsync(account);
            account = new Account();
            this.notificationMessage = "Account created successfully";
        }
        catch (Exception e)
        {
            this.notificationMessage = e.Message;
        }

        this.displayNotifiation = true;

    }

}
