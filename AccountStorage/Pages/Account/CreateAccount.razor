@page "/create-account"
@inject IPlatformService PlatformService
@inject IAccountService AccountService
@inject ICategoryService CategoryService

<EditForm class="d-flex justify-content-center align-items-center flex-column gap-3" Model="account" OnSubmit="OnPost">
    <h3>Create a new account</h3>
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group w-50">
        <div class="form-floating mb-3">
            <InputText class="form-control" id="accoutName" placeholder="Your account name" name="AccountName" @bind-Value="account.AccountName" required></InputText>
            <label for="accoutName">Account name</label>
        </div>
        <div class="form-floating mb-3">
            <InputText type="email" class="form-control" id="floatingInput" placeholder="name@example.com" @bind-Value="account.Email" required></InputText>
            <label for="floatingInput">Email address</label>
        </div>
        <div class="form-floating mb-3">
            <InputText type="password" class="form-control" id="floatingPassword" placeholder="Password" autocomplete="off" @bind-Value="account.Password" required></InputText>
            <label for="floatingPassword">Password</label>
        </div>
        <div class="form-control mb-3">
            <select class="form-select text-body" @bind="@account.Platform.Name" required>
                <option disabled hidden selected>Platform</option>
                @foreach (var platform in platforms)
                {
                    <option>@platform.Name</option>
                }
                <option>Other</option>
            </select>
        </div>
        <CreatePlatformComponent Display="displayCreatePlatform" />
        <div class="form-control mb-3">
            <select class="form-select text-body" @bind="@account.Category.Name" required>
                <option disabled hidden selected>Category</option>
                @foreach (var category in categories)
                {
                    @if (!category.Name.Equals("Other"))
                    {
                        <option>@category.Name</option>
                    }
                }
                <option>Other</option>
            </select>
        </div>
    </div>
    <div class="form-group w-50 text-end">
        <button class="btn btn-outline-light">Create</button>
    </div>
</EditForm>
<NotificationDialog Display="displayNotifiation" Message="@notificationMessage" />

@code {
    private bool displayCreatePlatform = false;
    private bool displayNotifiation = false;
    private string notificationMessage = string.Empty;
    private string strPlatform = "Platform";
    private Account account = new Account();
    IEnumerable<Platform> platforms = new List<Platform>();
    IEnumerable<Category> categories = new List<Category>();

    private string PlatformName 
    {
        get
        {
            return strPlatform;
        }
        set
        {
            if (value.Equals("other", StringComparison.OrdinalIgnoreCase))
            {
                this.displayCreatePlatform = true;
            }
            else
            {
                this.displayCreatePlatform = false;
            }
            strPlatform = value;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        platforms = await PlatformService.GetPlatformsAsync();
        categories = await CategoryService.GetCategoriesAsync();
    }

    private async Task OnPost()
    {
        var platform = await PlatformService.GetPlatformByNameAsync(account.Platform.Name);
        var category = await CategoryService.GetCategoryByNameAsync(account.Category.Name);

        if (platform is null || category is null)
        {
            return;
        }
        //if (platform is not null)
        //{
        //    account.PlatformId = platform.Id;
        //    platform.Accounts.Add(account);
        //}
        //else
        //{
        //    account.Platform = new Platform()
        //    {
        //        Name = "Other",
        //    };
        //}

        //var platform = await Platform.

        try
        {
            account.CreationDate = DateTime.Now;
            account.LastModification = DateTime.Now;
            account.PlatformId = platform.Id;
            account.CategoryId = category.Id;
            //account.Category = null;
            //account.Platform = null;
            await AccountService.CreateAccountAsync(account);
            account = new Account();
            this.notificationMessage = "Account created successfully";
        }
        catch (Exception e)
        {
            this.notificationMessage = e.Message;
        }

        this.displayNotifiation = true;

    }

}
